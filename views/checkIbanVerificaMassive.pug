extends layout

block content
  .container
    h1.mt-4.mb-3 Welcome to #{title}
    p.lead Elenco IBAN elaborati: #{bulkRequestId || 'N/A'}
      .mb-3
        strong Stato Validazione globale:
        |  #{status || 'N/A'}

      .mb-3
        strong Numero di richieste:
        |  #{totalItems || (result && result.length) || 'N/A'}
     
    // FORM
    form(method='POST', action='/checkIban/massiveVerifica')
      .it-form-group
        label.it-label(for='bulkRequestId') bulkRequestId
        input#bulkRequestId.it-input(type='text', name='bulkRequestId', placeholder='Inserisci bulkRequestId', required)

      button.btn.btn-primary(type='submit') Verifica bulkRequestId

    // RISULTATI
    if result
      h2.mt-5 Risultato API PagoPA

      .d-flex.flex-wrap.gap-2.mb-3
        button#downloadBtn.btn.btn-success(type='button') Scarica JSON
        button#downloadCsvBtn.btn.btn-info(type='button') Esporta CSV
        button#downloadXlsxBtn.btn.btn-warning(type='button') Esporta XLSX

      - var payload = result || {}
      - var bulkRequestId = payload.bulkRequestId || 'N/A'
      - var bulkStatus = payload.bulkRequestStatus || 'N/A'
      - var total = payload.totalItemsCount || 0
      - var processed = payload.processedItemsCount || 0
      - var dataList = payload.list || []

      p
        strong bulkRequestId:
        | #{' ' + bulkRequestId}
      p
        strong Stato Richiesta:
        | #{' ' + bulkStatus}
      p
        strong Elementi Totali:
        | #{' ' + total}
      p
        strong Elementi Elaborati:
        | #{' ' + processed}

      if dataList.length
        table.table.table-bordered.table-striped.table-sm
          thead
            tr
              th #
              th RequestCode
              th IBAN
              th Ragione Sociale
              th Riferimento Legale
              th Cod. Fisc. Rapp.
              th Intestatario (P.IVA)
              th Stato
              th Banca
              th BIC
              th Filiale
          tbody
            each item, i in dataList
              - var accountValue = item.account && item.account.value || 'N/A'
              - var ragioneSociale = item.anagraficaInfo && item.anagraficaInfo.ragioneSociale || 'N/A'
              - var riferimentoLegale = item.anagraficaInfo && item.anagraficaInfo.riferimentoLegale || 'N/A'
              - var codiceFiscaleRapp = item.anagraficaInfo && item.anagraficaInfo.codiceFiscaleRapp || 'N/A'
              - var vatCode = item.accountHolder && item.accountHolder.vatCode || 'N/A'
              - var status = item.validationStatus || 'N/A'
              - var bank = item.bankInfo && item.bankInfo.businessName || 'N/A'
              - var bic = item.bankInfo && item.bankInfo.bicCode || 'N/A'
              - var branch = item.bankInfo && item.bankInfo.branchName || 'N/A'

              tr(class=status === 'KO' ? 'table-danger' : 'table-success')
                td #{i + 1}
                td #{item.requestCode}
                td #{accountValue}
                td #{ragioneSociale}
                td #{riferimentoLegale}
                td #{codiceFiscaleRapp}
                td #{vatCode}
                td #{status}
                td #{bank}
                td #{bic}
                td #{branch}
      else
        p Nessun dato presente nella lista.

      //pre#jsonResult.bg-light.p-3.border.rounded= JSON.stringify(result, null, 2)

  // SheetJS per esportazione XLSX
  script(src="https://cdn.sheetjs.com/xlsx-latest/package/dist/xlsx.full.min.js")

  // SCRIPT EXPORT
  script.
    var dataList = !{JSON.stringify(dataList)};
    var resultObj = !{JSON.stringify(result)};

    // Scarica JSON
    document.getElementById('downloadBtn')?.addEventListener('click', function () {
      const blob = new Blob([JSON.stringify(resultObj, null, 2)], { type: 'application/json' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = 'result.json';
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
    });

    // Scarica CSV
    document.getElementById('downloadCsvBtn')?.addEventListener('click', function () {
      if (!dataList.length) return alert('Nessun dato da esportare!');

      const headers = [
        'RequestCode', 'IBAN', 'Ragione Sociale', 'Riferimento Legale', 'Cod. Fisc. Rapp.',
        'Intestatario (P.IVA)', 'Stato', 'Banca', 'BIC', 'Filiale'
      ];

      const escapeCSV = value =>
        typeof value === 'string' && (value.includes(',') || value.includes('"') || value.includes('\n'))
          ? '"' + value.replace(/"/g, '""') + '"'
          : value;

      const rows = dataList.map(item => [
        escapeCSV(item.requestCode || ''),
        escapeCSV(item.account && item.account.value || ''),
        escapeCSV(item.anagraficaInfo && item.anagraficaInfo.ragioneSociale || ''),
        escapeCSV(item.anagraficaInfo && item.anagraficaInfo.riferimentoLegale || ''),
        escapeCSV(item.anagraficaInfo && item.anagraficaInfo.codiceFiscaleRapp || ''),
        escapeCSV(item.accountHolder && item.accountHolder.vatCode || ''),
        escapeCSV(item.validationStatus || ''),
        escapeCSV(item.bankInfo && item.bankInfo.businessName || ''),
        escapeCSV(item.bankInfo && item.bankInfo.bicCode || ''),
        escapeCSV(item.bankInfo && item.bankInfo.branchName || '')
      ].join(','));

      const csv = [headers.join(','), ...rows].join('\r\n');
      const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = 'result.csv';
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
    });

    // Scarica XLSX
    document.getElementById('downloadXlsxBtn')?.addEventListener('click', function () {
      if (!dataList.length) return alert('Nessun dato da esportare!');

      const ws_data = [
        ['RequestCode', 'IBAN', 'Ragione Sociale', 'Riferimento Legale', 'Cod. Fisc. Rapp.',
         'Intestatario (P.IVA)', 'Stato', 'Banca', 'BIC', 'Filiale']
      ];

      dataList.forEach(item => {
        ws_data.push([
          item.requestCode || '',
          item.account && item.account.value || '',
          item.anagraficaInfo && item.anagraficaInfo.ragioneSociale || '',
          item.anagraficaInfo && item.anagraficaInfo.riferimentoLegale || '',
          item.anagraficaInfo && item.anagraficaInfo.codiceFiscaleRapp || '',
          item.accountHolder && item.accountHolder.vatCode || '',
          item.validationStatus || '',
          item.bankInfo && item.bankInfo.businessName || '',
          item.bankInfo && item.bankInfo.bicCode || '',
          item.bankInfo && item.bankInfo.branchName || ''
        ]);
      });

      const wb = XLSX.utils.book_new();
      const ws = XLSX.utils.aoa_to_sheet(ws_data);
      XLSX.utils.book_append_sheet(wb, ws, 'Risultati');
      XLSX.writeFile(wb, 'result.xlsx');
    });
